<div class="container-fluid text-center">
  <hr>
  <h2>in which phase is your article right now?</h2>
  <div id="diagram" class="text-center">

  </div>
  <p>
    <bold>*</bold> "Fishing" means that a member of the EC finds the time to read the article thoroughly and thinks it has the potential to be published, deciding to "make a case" to the EC for it, ie to construct arguments and assemble reports to convince it to accept the article for publication (possibly with conditions).
  </p>
</div>

<script type="text/javascript">

  var cachedWidth = $(window).width();
  var margin = ({top: 20, right: 10, bottom: 10, left: 10});
  var standard_box_size = ({width: 100, height: 25});
  var standart_font = "13px 'Helvetica Neue'";
  var flangeSize = 10;
  var padding1 = standard_box_size.height + 5;
  var padding2 = 10;
  var stroke_width = 2.5;

  //drawTree("#diagram");
  drawFlowChart("#diagram")

  $( window ).resize(function() {

  var newWidth = $(window).width();
  if(newWidth !== cachedWidth){
    $("#diagram").empty();
    drawFlowChart("#diagram")
    //drawTree("#diagram");
    cachedWidth = newWidth;
  }

});


  function drawFlowChart(container){
    const dataset = <%= raw submission.flow_chart.to_json %>;
    var width = $(window).width();

    //change x_distance_between_nodes to change columns
    var x_distance_between_nodes = width/3;
    var y_distance_between_nodes = 120;
    var box_size = {
      width: width/5,
      height: y_distance_between_nodes/2,
    }

    var height = 12 * (y_distance_between_nodes)

    const svg = d3.select(container).append('svg')
    //	  .attr("viewBox", [-margin.left, -margin.top, width, height])
    .attr("width", width)
    .attr("height", height)
    .style("overflow", "scroll");

    const gNode = svg.append("g")
      .attr("font-family", "sans-serif")
      .attr("transform", `translate(${box_size.width/2},${margin.top})`);

    // Initialize the nodes
    const node = gNode.selectAll("g")
       .data(dataset.nodes);
       //.enter();
    const nodeEnter = node.enter().append("g")
    .attr("transform", d => `translate(${d.x * x_distance_between_nodes},${d.y * y_distance_between_nodes})`)
    .attr("x",  d => `${d.x * x_distance_between_nodes}`)
    .attr("y",  d => `${d.y * y_distance_between_nodes}`)
    .attr("id", d => `${d.id}`)
    .attr("phase_id", d => `${d.phase_id}`);

    //nodeEnter.append("circle")
    //  .attr("r", 2);

      nodeEnter.append("foreignObject")
          .attr("x", d => -box_size.width/2)
          .attr("width", box_size.width)
          .attr("height", box_size.height)
          .attr("id", d => `${d.id}`)
          .attr("your_article_is_here_sign", d => `${d.your_article_is_here_sign}`)
            .append("xhtml:div")
            .attr("class", d => `${d.class}`)
            .style("opacity", 0.0)
            .style("font", standart_font)
            .html(d => `<b>${d.text}</b>`)
            .transition()
            .duration(3000)
            .style("opacity", 1.0)
            .delay(function(d,i){return(i*300)});



     const link = gNode.append("g")
       .attr("fill", "none")
       .attr("stroke", "black")
       .attr("stroke-opacity", 0.0)
       .attr("stroke-width", stroke_width)
       .selectAll("path")
         .data(dataset.links)
         .join("path")
           .attr("d", d => arrowTo({x: d3.select(`[phase_id='${d.source}']`).attr("x")/1, y: d3.select(`[phase_id='${d.source}']`).attr("y")/1}, {x: d3.select(`[phase_id='${d.target}']`).attr("x")/1, y: d3.select(`[phase_id='${d.target}']`).attr("y")/1}, box_size))
           .transition()
           .duration(3000)
           .style("stroke-opacity", 1.0)
           .delay(function(d,i){return(i*200)});

        //  const texts_above_link = gNode.selectAll("g").data(dataset.text_above_links);
          var texts_above_link = svg.selectAll("g").data(dataset.text_above_links);

          texts_above_link
          .each(function(d) {

            var text_group = svg.append("g");

            text_group
                .append("text")
                .attr("transform", `translate(${(d.x * x_distance_between_nodes) + box_size.width/3},${((d.y * y_distance_between_nodes) + 30)})`)
                .style("font-size", "14px")
                .text(d.text1)
                .style('fill', 'black');

            text_group
                .append("text")
                .attr("transform", `translate(${(d.x * x_distance_between_nodes) + box_size.width/3},${((d.y * y_distance_between_nodes) + 45)})`)
                .style("font-size", "14px")
                .text(d.text2)
                .style('fill', 'black');
          });

          // texts_above_link
          //  .append("g")
          //  .append("text")
          //  .attr("transform", d => `translate(${(d.x * x_distance_between_nodes)  - box_size.width/4},${((d.y * y_distance_between_nodes) - 0)})`)
          //  .style("font-size", "14px")
          //  .text(d => d.text2)
          //  .style('fill', 'black');


/*
          const  box = node.append("foreignObject")
              .attr("x", d => (d.x * x_distance_between_nodes) - (box_size.width/2))
              .attr("y", d => (d.y * y_distance_between_nodes))
              .attr("width", box_size.width)
              .attr("height", box_size.height)
              .attr("id", d => `${d.id}`)
              .attr("your_article_is_here_sign", d => `${d.your_article_is_here_sign}`);


              box.append("xhtml:div")
              .attr("class", d => `${d.class}`)
              .style("opacity", 0.0)
              .style("font", standart_font)
              .html(d => `<b>${d.text}</b>`)
              .transition()
              .duration(3000)
              .style("opacity", 1.0)
              .delay(function(d,i){return(i*300)});


              box.filter(function(d){ return d.your_article_is_here_sign == "yes"; })
              .append("xhtml:div")
              //.attr("id", "your_article_is_here_sign")
                .style("font", standart_font)
                .html(`<b>↖ your article is here</b>`);

*/
              //add_your_article_is_here_sign("#diagram");

            setTimeout(function() {

              var your_article_is_here_sign = nodeEnter.filter(function(d){ return d.your_article_is_here_sign == "yes"; })
                   .raise()
                   .append("text")
                   .attr("x", box_size.width/2)
                   .attr("y", box_size.height)
                   .attr("id", "swiggel_this_element")
                   .attr("font-weight", 900)
                   .text("↖ your article is here")
                   .style('fill', 'SkyBlue')
                   .style("opacity", 0.0);

                  //.attr("width", box_size.width)
                  //.attr("height", box_size.height)
                  //.attr("id", "swiggel_this_element")
                  //  .append("xhtml:div")
                    //.attr("class", d => `${d.class}`)
                    //.style("opacity", 0.0)
                    //.style("font", standart_font)
                    //.html(d => `<b>↖ your article is here</b>`)
                    //.transition()
                    //.duration(3000)
                    //.style("opacity", 1.0)
                    //.delay(function(d,i){return(i*300)});
                    //swiggel();
                    make_visible("#swiggel_this_element");
            }, dataset.nodes.length * 300);

  }
  //functions
  function getSize(d) {
    var bbox = this.getBBox(),
        cbbox = this.parentNode.getBBox(),
        scale = Math.min(cbbox.width/bbox.width, cbbox.height/bbox.height);
    d.scale = scale;
  }

  function drawTree(container){

    //var data = <%#= raw "#{submission.peer_review_process.to_json}" %>;

    var width = standard_box_size.width * 3.8;

    const hierarchy = d3.hierarchy(data);
    hierarchy.dx = standard_box_size.width; //20;
    hierarchy.dy = standard_box_size.height * 3; //width / (root.height + 1);
    //const root = d3.tree().nodeSize([hierarchy.dx, hierarchy.dy])(hierarchy);
    const root = d3.tree().size([200, 400])(hierarchy);

    console.log(root);

    var height = 600;
    //var height = root.height * (standard_box_size.height * 3.4);

    const svg = d3.select(container).append('svg')
    .attr("width", width + margin.right + margin.left)
    .attr("height", height + margin.top + margin.bottom)
    .style("overflow", "scroll");

    const g = svg.append("g")
      .attr("font-family", "sans-serif")
      .attr("transform", `translate(${width/2.1},${margin.top})`);

    const link = g.append("g")
      .attr("fill", "none")
      .attr("stroke", "black")
      .attr("stroke-opacity", 0.0)
      .attr("stroke-width", stroke_width)
    .selectAll("path")
      .data(root.links())
      .join("path")
        .attr("d", d => arrowTo(d.source, d.target))
        .transition()
        .duration(3000)
        .style("stroke-opacity", 0.6)
        .delay(function(d,i){return(i*300)});

    const node = g.append("g")
      .attr("stroke-linejoin", "round")
      .attr("stroke-width", stroke_width)
      .selectAll("g")
      .data(root.descendants())
      .join("g")
        .attr("transform", d => `translate(${d.x},${d.y})`);

    node.append("foreignObject")
      .attr("x", -standard_box_size.width / 2)
      .attr("width", standard_box_size.width)
      .attr("height", standard_box_size.height)
      .attr("id", d => `${d.data.id}`)
      .attr("class", d => `${d.data.reject_is_possible}`)
      .append("xhtml:div")
      .attr("class", d => `${d.data.class}`)
      .style("opacity", 0.0)
      .style("font", standart_font)
      .html(d => `<b>${d.data.content}</b>`)
      .transition()
      .duration(3000)
      .style("opacity", 1.0)
      .delay(function(d,i){return(i*300)});

      add_your_article_is_here_sign("#diagram");
      //add_possible_reject_signs("#diagram");
      //add_loop("#diagram");
  		$("#diagram").scrollLeft(width/2 - standard_box_size.width/1.8);

      return svg.node();
  }


  function add_loop(container){
    var to_the_left = standard_box_size.width * 1.8;
    //var to_the_right = standard_box_size.width/1.3;

    //first box
    d3.selectAll("#editor-assesses-reviews")
      .select(function() { return this.parentNode; })
      .append("foreignObject")
        //.attr("transform", d => `translate(${main_nodes[2].x - (standard_box_size.width / 2) + 125},${main_nodes[2].y + 25})`)
        .attr("x", -to_the_left)
        .attr("width", standard_box_size.width)
        .attr("height", standard_box_size.height)
          .append("xhtml:div")
          .style("font", standart_font)
          .style("opacity", 0)
          .attr("class", "bg-secondary rounded p-1 text-white text-center")
          .html(`<b>article needs revisions</b>`)
          .transition()
          .duration(3000)
          .style("opacity", 1.0)
          .delay(function(d,i){return(i*300)});

          //first path
        d3.selectAll("#editor-assesses-reviews")
        .select(function() { return this.parentNode; })
        .append("path")
          .attr("d", d => generateArrow(0, standard_box_size.height/2, -to_the_left + standard_box_size.width, standard_box_size.height/2, 15, standard_box_size.width / 1.8, 15))
          //.attr("d", d => arrowTo({"x": 0, "y": 0}, {"x": standard_box_size.width, "y": 0}))
          .attr("fill", "none")
          .attr("stroke", "black")
          .attr("stroke-opacity", 0.6)
          .attr("stroke-width", stroke_width);

          //second box
        d3.selectAll("#editor-assesses-reviews")
          .select(function() { return this.parentNode; })
          .append("foreignObject")
            //.attr("transform", d => `translate(${main_nodes[2].x - (standard_box_size.width / 2) + 125},${main_nodes[2].y + 25})`)
            .attr("x", -to_the_left)
            .attr("y",-standard_box_size.height*3)
            .attr("width", standard_box_size.width)
            .attr("height", standard_box_size.height)
              .append("xhtml:div")
              .style("font", standart_font)
              .style("opacity", 0)
              .attr("class", "bg-secondary rounded p-1 text-white text-center")
              .html(`<b>author resubmits article</b>`)
              .transition()
              .duration(3000)
              .style("opacity", 1.0)
              .delay(400);

            //second path
            d3.selectAll("#editor-assesses-reviews")
            .select(function() { return this.parentNode; })
            .append("path")
              .attr("d", d => generateArrow(-to_the_left + standard_box_size.width/2, 0, -to_the_left + standard_box_size.width/2, -standard_box_size.height*2, 15, 10, 15))
              //.attr("d", d => arrowTo({"x": 0, "y": 0}, {"x": standard_box_size.width, "y": 0}))
              .attr("fill", "none")
              .attr("stroke", "black")
              .attr("stroke-opacity", 0.6)
              .attr("stroke-width", stroke_width);


            //third path
          d3.selectAll("#editor-assesses-reviews")
          .select(function() { return this.parentNode; })
          .append("path")
            .attr("d", d => generateArrow(-to_the_left + standard_box_size.width/2, (-standard_box_size.height/2)*5, -standard_box_size.width/2, (-standard_box_size.height/2)*5, 15, standard_box_size.width / 1.8, 15))
            //.attr("d", d => arrowTo({"x": 0, "y": 0}, {"x": standard_box_size.width, "y": 0}))
            .attr("fill", "none")
            .attr("stroke", "black")
            .attr("stroke-opacity", 0.6)
            .attr("stroke-width", stroke_width);

  }

  function add_possible_reject_signs(container){
    var to_the_right = standard_box_size.width/1.3;

    d3.selectAll(".reject_is_possible")
      .select(function() { return this.parentNode; })
      .append("foreignObject")
        //.attr("transform", d => `translate(${main_nodes[2].x - (standard_box_size.width / 2) + 125},${main_nodes[2].y + 25})`)
        .attr("x", to_the_right)
        .attr("width", standard_box_size.width)
        .attr("height", standard_box_size.height)
        //.attr("id", "your_article_is_here_sign_swiggel")
          .append("xhtml:div")
          .style("font", standart_font)
          .style("opacity", 0)
          .attr("class", "bg-secondary rounded p-1 text-white text-center")
          .html(`<b>article is rejected</b>`)
          .transition()
          .duration(3000)
          .style("opacity", 1.0)
          .delay(function(d,i){return(i*300)});

          d3.selectAll(".reject_is_possible")
          .select(function() { return this.parentNode; })
          .append("path")
            .attr("d", d => generateArrow(0, standard_box_size.height/2, to_the_right, standard_box_size.height/2, 15, standard_box_size.width / 1.8, 15))
            //.attr("d", d => arrowTo({"x": 0, "y": 0}, {"x": standard_box_size.width, "y": 0}))
            .attr("fill", "none")
            .attr("stroke", "black")
            .attr("stroke-opacity", 0.6)
            .attr("stroke-width", stroke_width);

  }



  function add_your_article_is_here_sign(container) {

    //d3.select(`[your_article_is_here_sign='yes']`)

    //const svg = d3.select(container).select("svg");
    //d3.selectAll(".your_article_is_here_sign")
      //.select(function() { return this.parentNode.parentNode; })
    d3.select(`[your_article_is_here_sign='yes']`)
      .append("foreignObject")
      //.attr("transform", d => `translate(${main_nodes[2].x - (standard_box_size.width / 2) + 125},${main_nodes[2].y + 25})`)
      .attr("x", 0)
      .attr("y", 0)
      .attr("width", standard_box_size.width)
      .attr("height", standard_box_size.height)
      .attr("id", "your_article_is_here_sign_swiggel")
      .append("xhtml:div")
      //.attr("id", "your_article_is_here_sign")
      .style("font", standart_font)
      .html(`<b>↖ your article is here</b>`);

      swiggel();
  }

  function swiggel(element) {
    d3.select(element)
    .transition()
    .ease(d3.easeLinear)
    .duration(750)
    .attr("transform", `translate(${5},${5})`)
    //.style("opacity", 0.2)
    .transition()
    .ease(d3.easeLinear)
    .duration(750)
    .attr("transform", `translate(${-5},${-5})`)
    //.style("opacity", 1)
    .on("end", function(){
      swiggel("#swiggel_this_element");
    })  // when the transition finishes start again
  };

  function make_visible(element) {
    d3.select(element)
    .raise()
    .transition()
    .ease(d3.easeLinear)
    .duration(1000)
    .style("opacity", 1.0)
    .on("end", function(){swiggel("#swiggel_this_element")});
  };

  function generateArrow(x1, y1, x2, y2, flangeSize, padding1, padding2) {
    const dx = x2 - x1;
    const dy = y2 - y1;
    const length = Math.sqrt(dx * dx + dy * dy);
    //Hypotenuse

    let multiplier1 = padding1 / length;
    const dx1 = dx * multiplier1;
    const dy1 = dy * multiplier1;


    let multiplier2 = padding2 / length;
    const dx2 = dx * multiplier2;
    const dy2 = dy * multiplier2;

    var px = y1 - y2;
    var py = x2 - x1;
    let plength = Math.sqrt(px * px + py * py);
    let pmultiplier = flangeSize / plength;

    const px1 = px * pmultiplier;
    const py1 = py * pmultiplier;

    const sx = dx * pmultiplier;
    const sy = dy * pmultiplier;

    const a1 = x1 + dx1;
    const b1 = y1 + dy1;
    const a2 = x2 - dx2;
    const b2 = y2 - dy2;

    return `
      M${a1}, ${b1}
      L${a2}, ${b2}
      M${a2 + px1 - sx}, ${b2 + py1 - sy}
      L${a2}, ${b2}
      L${a2 - px1 - sx}, ${b2 - py1 -sy}
    `;
  }

   function arrowTo(source, target, box_size) {
    //var y0 = d.source.y;
    //var x0 = d.source.x;
    //var x1 = d.target.x;
    //var y1 = d.target.y;

    var y0 = source.y;
    var x0 = source.x;
    var x1 = target.x;
    var y1 = target.y;

    var padding1 = Math.hypot(box_size.height, box_size.width)/1.5;
    var padding2 = 20;

    if(x0 == x1){
      padding1 = box_size.height + 10;
      padding2 = 15;

      if(y0 > y1){
        padding1 = 10;
        padding2 = box_size.height + 10;
      }
    }

    if(y0 == y1){
      y0 = y0 + box_size.height/2;
      y1 = y1 + box_size.height/2;
      padding1 = box_size.width/2 + 5;
      padding2 = box_size.width/2 + 5;
    }

    var arrow = generateArrow(x0, y0, x1, y1, 10, padding1, padding2);

    return arrow.toString();
    //return path.toString();
  }

  var arrowTox = function(d) {
    var y0 = d.source.y;
    var x0 = d.source.x;
    var x1 = d.target.x;
    var y1 = d.target.y;


    var arrow = generateArrow(x0, y0, x1, y1, 15, 25, 25);

    return arrow.toString();
    //return path.toString();
  }

</script>
