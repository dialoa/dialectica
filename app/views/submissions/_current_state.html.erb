<div class="container-fluid text-center">
  <hr>
  <h2>in which phase is your article right now?</h2>
  <div id="diagram" class="text-center" style="overflow: scroll;">

  </div>
</div>

<script type="text/javascript">
  var cachedWidth = $(window).width();
  var margin = ({top: 20, right: 10, bottom: 10, left: 10});
  var standard_box_size = ({width: 200, height: 25});
  var standart_font = "13px 'Helvetica Neue'";
  var standard_class = "bg-first-color rounded p-1 text-white text-center";
  var success_class = "bg-success rounded p-1 text-white text-center";
  var rejected_class = "bg-danger rounded p-1 text-white text-center";
  var information_class = "bg-info rounded p-1 text-white text-center";
  var flangeSize = 10;
  var padding1 = standard_box_size.height + 5;
  var padding2 = 10;
  var stroke_width = 2.5;

  //drawTree("#diagram");
  drawFlowChart("#diagram")

  $( window ).resize(function() {

  var newWidth = $(window).width();
  if(newWidth !== cachedWidth){
    //$("#diagram").empty();
    //drawTree("#diagram");
    cachedWidth = newWidth;
  }

});


  function drawFlowChart(container){
    const dataset =  {
      nodes: [
        {
          id: 1,
          x: 1,
          y: 0,
        },
        {
          id: 2,
          x: 1,
          y: 1,
        },
        {
          id: 3,
          x: 1,
          y: 2,
        },
        {
          id: 4,
          x: 1,
          y: 3,
        },
        {
          id: 5,
          x: 0,
          y: 3,
        },
        {
          id: 6,
          x: 0,
          y: 2,
        },
        {
          id: 7,
          x: 1,
          y: 4,
        },
        {
          id: 8,
          x: 1,
          y: 5,
        },
        {
          id: 9,
          x: 1,
          y: 6,
        },
        {
          id: "reject1",
          x: 2,
          y: 1,
        },
        {
          id: "reject2",
          x: 2,
          y: 3,
        },
      ],
      links: [
        {source: 1, target: 2},
        {source: 2, target: 3},
        {source: 3, target: 4},
        {source: 4, target: 5},
        {source: 5, target: 6},
        {source: 6, target: 3},
        {source: 4, target: 7},
        {source: 7, target: 8},
        {source: 8, target: 9},
      ]
    };

    var width = $("#diagram").width();

    var x_distance_between_nodes = width/4;
    var y_distance_between_nodes = 150;

    const svg = d3.select(container).append('svg')
    .attr("width", width)
    .attr("height", 2500)
    .style("overflow", "scroll");

    const g = svg.append("g")
      .attr("font-family", "sans-serif")
      .attr("transform", `translate(${width/3},${margin.top})`);

    // Initialize the nodes
    const node = g.append("g")
       //.attr("class", "nodes")
       .selectAll("circle")
       .data(dataset.nodes)
       .enter();
         node.append("circle")
           .attr("r", 10)
           .attr("cx", d => d.x * x_distance_between_nodes)
           .attr("cy", d => d.y * y_distance_between_nodes)
           .attr("id", d => `circle-${d.id}`);

           node.append("text")
             .attr("x", d => (d.x * x_distance_between_nodes)+15)
             .attr("y", d => d.y * y_distance_between_nodes)
            .text(function(d) { return `${d.id}`; });

       const link = g.append("g")
         .attr("fill", "none")
         .attr("stroke", "black")
         .attr("stroke-opacity", 1.0)
         .attr("stroke-width", stroke_width)
       .selectAll("path")
         .data(dataset.links)
         .join("path")
           .attr("d", d => arrowTo({x: d3.select(`#circle-${d.source}`).attr("cx")/1, y: d3.select(`#circle-${d.source}`).attr("cy")/1}, {x: d3.select(`#circle-${d.target}`).attr("cx")/1, y: d3.select(`#circle-${d.target}`).attr("cy")/1}));


  }
  //functions
  function drawTree(container){

    var data = <%= raw "#{submission.peer_review_process.to_json}" %>;

    var width = standard_box_size.width * 3.8;

    const hierarchy = d3.hierarchy(data);
    hierarchy.dx = standard_box_size.width; //20;
    hierarchy.dy = standard_box_size.height * 3; //width / (root.height + 1);
    //const root = d3.tree().nodeSize([hierarchy.dx, hierarchy.dy])(hierarchy);
    const root = d3.tree().size([200, 400])(hierarchy);

    console.log(root);

    var height = 600;
    //var height = root.height * (standard_box_size.height * 3.4);

    const svg = d3.select(container).append('svg')
    .attr("width", width + margin.right + margin.left)
    .attr("height", height + margin.top + margin.bottom)
    .style("overflow", "scroll");

    const g = svg.append("g")
      .attr("font-family", "sans-serif")
      .attr("transform", `translate(${width/2.1},${margin.top})`);

    const link = g.append("g")
      .attr("fill", "none")
      .attr("stroke", "black")
      .attr("stroke-opacity", 0.0)
      .attr("stroke-width", stroke_width)
    .selectAll("path")
      .data(root.links())
      .join("path")
        .attr("d", d => arrowTo(d.source, d.target))
        .transition()
        .duration(3000)
        .style("stroke-opacity", 0.6)
        .delay(function(d,i){return(i*300)});

    const node = g.append("g")
      .attr("stroke-linejoin", "round")
      .attr("stroke-width", stroke_width)
      .selectAll("g")
      .data(root.descendants())
      .join("g")
        .attr("transform", d => `translate(${d.x},${d.y})`);

    node.append("foreignObject")
      .attr("x", -standard_box_size.width / 2)
      .attr("width", standard_box_size.width)
      .attr("height", standard_box_size.height)
      .attr("id", d => `${d.data.id}`)
      .attr("class", d => `${d.data.reject_is_possible}`)
      .append("xhtml:div")
      .attr("class", d => `${d.data.class}`)
      .style("opacity", 0.0)
      .style("font", standart_font)
      .html(d => `<b>${d.data.content}</b>`)
      .transition()
      .duration(3000)
      .style("opacity", 1.0)
      .delay(function(d,i){return(i*300)});

      add_your_article_is_here_sign("#diagram");
      //add_possible_reject_signs("#diagram");
      //add_loop("#diagram");
  		$("#diagram").scrollLeft(width/2 - standard_box_size.width/1.8);

      return svg.node();
  }


  function add_loop(container){
    var to_the_left = standard_box_size.width * 1.8;
    //var to_the_right = standard_box_size.width/1.3;

    //first box
    d3.selectAll("#editor-assesses-reviews")
      .select(function() { return this.parentNode; })
      .append("foreignObject")
        //.attr("transform", d => `translate(${main_nodes[2].x - (standard_box_size.width / 2) + 125},${main_nodes[2].y + 25})`)
        .attr("x", -to_the_left)
        .attr("width", standard_box_size.width)
        .attr("height", standard_box_size.height)
          .append("xhtml:div")
          .style("font", standart_font)
          .attr("class", "bg-secondary rounded p-1 text-white text-center")
          .html(`<b>article needs revisions</b>`);

          //first path
        d3.selectAll("#editor-assesses-reviews")
        .select(function() { return this.parentNode; })
        .append("path")
          .attr("d", d => generateArrow(0, standard_box_size.height/2, -to_the_left + standard_box_size.width, standard_box_size.height/2, 15, standard_box_size.width / 1.8, 15))
          //.attr("d", d => arrowTo({"x": 0, "y": 0}, {"x": standard_box_size.width, "y": 0}))
          .attr("fill", "none")
          .attr("stroke", "black")
          .attr("stroke-opacity", 0.6)
          .attr("stroke-width", stroke_width);

          //second box
        d3.selectAll("#editor-assesses-reviews")
          .select(function() { return this.parentNode; })
          .append("foreignObject")
            //.attr("transform", d => `translate(${main_nodes[2].x - (standard_box_size.width / 2) + 125},${main_nodes[2].y + 25})`)
            .attr("x", -to_the_left)
            .attr("y",-standard_box_size.height*3)
            .attr("width", standard_box_size.width)
            .attr("height", standard_box_size.height)
              .append("xhtml:div")
              .style("font", standart_font)
              .attr("class", "bg-secondary rounded p-1 text-white text-center")
              .html(`<b>author resubmits article</b>`)

            //second path
            d3.selectAll("#editor-assesses-reviews")
            .select(function() { return this.parentNode; })
            .append("path")
              .attr("d", d => generateArrow(-to_the_left + standard_box_size.width/2, 0, -to_the_left + standard_box_size.width/2, -standard_box_size.height*2, 15, 10, 15))
              //.attr("d", d => arrowTo({"x": 0, "y": 0}, {"x": standard_box_size.width, "y": 0}))
              .attr("fill", "none")
              .attr("stroke", "black")
              .attr("stroke-opacity", 0.6)
              .attr("stroke-width", stroke_width);


            //third path
          d3.selectAll("#editor-assesses-reviews")
          .select(function() { return this.parentNode; })
          .append("path")
            .attr("d", d => generateArrow(-to_the_left + standard_box_size.width/2, (-standard_box_size.height/2)*5, -standard_box_size.width/2, (-standard_box_size.height/2)*5, 15, standard_box_size.width / 1.8, 15))
            //.attr("d", d => arrowTo({"x": 0, "y": 0}, {"x": standard_box_size.width, "y": 0}))
            .attr("fill", "none")
            .attr("stroke", "black")
            .attr("stroke-opacity", 0.6)
            .attr("stroke-width", stroke_width);

  }

  function add_possible_reject_signs(container){
    var to_the_right = standard_box_size.width/1.3;

    d3.selectAll(".reject_is_possible")
      .select(function() { return this.parentNode; })
      .append("foreignObject")
        //.attr("transform", d => `translate(${main_nodes[2].x - (standard_box_size.width / 2) + 125},${main_nodes[2].y + 25})`)
        .attr("x", to_the_right)
        .attr("width", standard_box_size.width)
        .attr("height", standard_box_size.height)
        //.attr("id", "your_article_is_here_sign_swiggel")
          .append("xhtml:div")
          .style("font", standart_font)
          .attr("class", "bg-secondary rounded p-1 text-white text-center")
          .html(`<b>article is rejected</b>`);

          d3.selectAll(".reject_is_possible")
          .select(function() { return this.parentNode; })
          .append("path")
            .attr("d", d => generateArrow(0, standard_box_size.height/2, to_the_right, standard_box_size.height/2, 15, standard_box_size.width / 1.8, 15))
            //.attr("d", d => arrowTo({"x": 0, "y": 0}, {"x": standard_box_size.width, "y": 0}))
            .attr("fill", "none")
            .attr("stroke", "black")
            .attr("stroke-opacity", 0.6)
            .attr("stroke-width", stroke_width);

  }



  function add_your_article_is_here_sign(container) {

    //const svg = d3.select(container).select("svg");
    d3.selectAll(".your_article_is_here_sign")
      .select(function() { return this.parentNode.parentNode; })
      .append("foreignObject")
      //.attr("transform", d => `translate(${main_nodes[2].x - (standard_box_size.width / 2) + 125},${main_nodes[2].y + 25})`)
      .attr("x", standard_box_size.width/3)
      .attr("y", standard_box_size.height * 1.2)
      .attr("width", standard_box_size.width)
      .attr("height", standard_box_size.height)
      .attr("id", "your_article_is_here_sign_swiggel")
      .append("xhtml:div")
      //.attr("id", "your_article_is_here_sign")
      .style("font", standart_font)
      .html(`<b>↖ your article is here</b>`);

      swiggel();
  }

  function swiggel() {
    d3.select("#your_article_is_here_sign_swiggel")
    .transition()
    .ease(d3.easeLinear)
    .duration(750)
    //.attr("x", function (d) { return this.x + 100})
    .attr("transform", `translate(${5},${5})`)
    //.attr("transform", `translate(${this.x}, 0)`)
    .transition()
    .ease(d3.easeLinear)
    .duration(750)
    .attr("transform", `translate(${-5},${-5})`)

  //  .attr('x', 920)     // move the circle to 920 on the x axis
  //  .transition()        // apply a transition
  //  .duration(2000)      // apply it over 2000 milliseconds
  //  .attr('x', 40)      // return the circle to 40 on the x axis
    .on("end", swiggel);  // when the transition finishes start again
  };

  function generateArrow(x1, y1, x2, y2, flangeSize, padding1, padding2) {
    const dx = x2 - x1;
    const dy = y2 - y1;
    const length = Math.sqrt(dx * dx + dy * dy);
    //Hypotenuse

    let multiplier1 = padding1 / length;
    const dx1 = dx * multiplier1;
    const dy1 = dy * multiplier1;


    let multiplier2 = padding2 / length;
    const dx2 = dx * multiplier2;
    const dy2 = dy * multiplier2;

    var px = y1 - y2;
    var py = x2 - x1;
    let plength = Math.sqrt(px * px + py * py);
    let pmultiplier = flangeSize / plength;

    const px1 = px * pmultiplier;
    const py1 = py * pmultiplier;

    const sx = dx * pmultiplier;
    const sy = dy * pmultiplier;

    const a1 = x1 + dx1;
    const b1 = y1 + dy1;
    const a2 = x2 - dx2;
    const b2 = y2 - dy2;

    return `
      M${a1}, ${b1}
      L${a2}, ${b2}
      M${a2 + px1 - sx}, ${b2 + py1 - sy}
      L${a2}, ${b2}
      L${a2 - px1 - sx}, ${b2 - py1 -sy}
    `;
  }

   function arrowTo(source, target) {
    //var y0 = d.source.y;
    //var x0 = d.source.x;
    //var x1 = d.target.x;
    //var y1 = d.target.y;

    var y0 = source.y;
    var x0 = source.x;
    var x1 = target.x;
    var y1 = target.y;
    console.log("ARROWTO");
    console.log(x0);
    console.log(y0);
    console.log(x1);
    console.log(y1);


    var arrow = generateArrow(x0, y0, x1, y1, 15, 30, 15);

    return arrow.toString();
    //return path.toString();
  }

  var arrowTox = function(d) {
    var y0 = d.source.y;
    var x0 = d.source.x;
    var x1 = d.target.x;
    var y1 = d.target.y;


    var arrow = generateArrow(x0, y0, x1, y1, 15, 25, 25);

    return arrow.toString();
    //return path.toString();
  }

</script>
