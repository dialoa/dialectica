<div class="container-fluid">
  <h2>in which phase is your article right now?</h2>
  <div id="diagram">

  </div>
</div>

<script>

  var cachedWidth = $(window).width();

  drawCurrentState("#diagram");

  $( window ).resize(function() {

  var newWidth = $(window).width();
  if(newWidth !== cachedWidth){
    console.log("resize!");
    $("#diagram").empty();
    drawCurrentState("#diagram");
    cachedWidth = newWidth;
  }

});

  //functions

  function drawCurrentState(container){
    margin = ({top: 10, right: 10, bottom: 10, left: 10});
    //var width = $( "#diagram" ).width();//500
    var width = 600;
    //var standard_box_size = ({width: 300, height: 30});
    var standard_box_size = ({width: 200, height: 25});


    //var height = standard_box_size.height * 8;
    var height = 500;
    var standart_font = "13px 'Helvetica Neue'";
    var standard_class = "bg-first-color rounded p-1 text-white text-center";
    var success_class = "bg-success rounded p-1 text-white text-center";
    var rejected_class = "bg-danger rounded p-1 text-white text-center";
    var information_class = "bg-info rounded p-1 text-white text-center";
    var flangeSize = 10;
    var padding1 = standard_box_size.height + 5;
    var padding2 = 10;

    var main_nodes = [
      {x: 100, y: 10},
    ]

    var times = 6;
    for(var i=0; i < times; i++){
      new_coordinates = [];
      new_x = main_nodes[0].x
      new_y = main_nodes[0].y + ((standard_box_size.height + 40) * (i + 1))

      main_nodes.push(
        {
          x: new_x,
          y: new_y
        }
      );
    }


    const svg = d3.select(container).append('svg')
      .attr("viewBox", [-margin.left, -margin.top, width, height])
      .style("user-select", "none");

    svg.append("foreignObject")
      .attr("transform", d => `translate(${main_nodes[0].x - (standard_box_size.width / 2)},${main_nodes[0].y})`)
      .attr("width", standard_box_size.width)
      .attr("height", standard_box_size.height)
      .append("xhtml:div")
      .attr("class", success_class)
      .style("font", standart_font)
      .html(`<b>author submits article</b>`);

    svg.append("path")
      .attr("d", generateArrow(
      main_nodes[0].x,
      main_nodes[0].y,
      main_nodes[1].x,
      main_nodes[1].y,
      flangeSize,
      padding1,
      padding2)
      )
      .attr("fill", "none")
      .attr("stroke", "green")
      .attr("stroke-opacity", 1.0)
      .attr("stroke-width", 2.5);


    svg.append("foreignObject")
      .attr("transform", d => `translate(${main_nodes[1].x - (standard_box_size.width / 2)},${main_nodes[1].y})`)
      .attr("width", standard_box_size.width)
      .attr("height", standard_box_size.height)
      .append("xhtml:div")
      .style("font", standart_font)
      .attr("class", success_class)
      .html(`<b>editor assesses article</b>`);

      svg.append("path")
        .attr("d", generateArrow(
        main_nodes[1].x,
        main_nodes[1].y,
        main_nodes[2].x,
        main_nodes[2].y,
        flangeSize,
        padding1,
        padding2)
        )
        .attr("fill", "none")
        .attr("stroke", "#164da2")
        .attr("stroke-opacity", 1.0)
        .attr("stroke-width", 2.5);

        //rejected #1
        svg.append("path")
          .attr("d", generateArrow(
            main_nodes[1].x,
            main_nodes[1].y + ((standard_box_size.height) / 2),
            main_nodes[1].x + + (standard_box_size.width / 1.3),
            main_nodes[1].y + ((standard_box_size.height) / 2),
           flangeSize,
           ((standard_box_size.width) / 2) + 10,
           padding2)
           )
          .attr("fill", "none")
          .attr("stroke", "red")
          .attr("stroke-opacity", 1.0)
          .attr("stroke-width", 2.5);

          svg.append("foreignObject")
            .attr("transform", d => `translate(${main_nodes[1].x + (standard_box_size.width / 1.3)}, ${main_nodes[1].y})`)
            .attr("width", standard_box_size.width)
            .attr("height", standard_box_size.height)
            .append("xhtml:div")
            .style("font", standart_font)
            .attr("class", rejected_class)
            .html(`<b>rejected</b>`);



      svg.append("foreignObject")
        .attr("transform", d => `translate(${main_nodes[2].x - (standard_box_size.width / 2)},${main_nodes[2].y})`)
        .attr("width", standard_box_size.width)
        .attr("height", standard_box_size.height)
        .append("xhtml:div")
        .attr("class", information_class)
        .attr("id", "article_sent_to_reviewers")
        .style("font", standart_font)
        .html(`<b>article sent to reviewers</b>`);

        svg.append("path")
          .attr("d", generateArrow(
          main_nodes[2].x,
          main_nodes[2].y,
          main_nodes[3].x,
          main_nodes[3].y,
          flangeSize,
          padding1,
          padding2)
          )
          .attr("fill", "none")
          .attr("stroke", "#164da2")
          .attr("stroke-opacity", 1.0)
          .attr("stroke-width", 2.5);


        svg.append("foreignObject")
          .attr("transform", d => `translate(${main_nodes[3].x - (standard_box_size.width / 2)},${main_nodes[3].y})`)
          .attr("width", standard_box_size.width)
          .attr("height", standard_box_size.height)
          .append("xhtml:div")
          .attr("class", standard_class)
          .style("font", standart_font)
          .html(`<b>editor assesses reviews</b>`);

          //rejected #2
          svg.append("path")
            .attr("d", generateArrow(
              main_nodes[3].x,
              main_nodes[3].y + ((standard_box_size.height) / 2),
              main_nodes[3].x + + (standard_box_size.width / 1.3),
              main_nodes[3].y + ((standard_box_size.height) / 2),
             flangeSize,
             ((standard_box_size.width) / 2) + 10,
             padding2)
             )
            .attr("fill", "none")
            .attr("stroke", "red")
            .attr("stroke-opacity", 1.0)
            .attr("stroke-width", 2.5);

            svg.append("foreignObject")
              .attr("transform", d => `translate(${main_nodes[3].x + (standard_box_size.width / 1.3)}, ${main_nodes[3].y})`)
              .attr("width", standard_box_size.width)
              .attr("height", standard_box_size.height)
              .append("xhtml:div")
              .style("font", standart_font)
              .attr("class", rejected_class)
              .html(`<b>rejected</b>`);

          svg.append("path")
            .attr("d", generateArrow(
            main_nodes[3].x,
            main_nodes[3].y,
            main_nodes[4].x,
            main_nodes[4].y,
            flangeSize,
            padding1,
            padding2)
            )
            .attr("fill", "none")
            .attr("stroke", "#164da2")
            .attr("stroke-opacity", 1.0)
            .attr("stroke-width", 2.5);

          svg.append("foreignObject")
            .attr("transform", d => `translate(${main_nodes[4].x - (standard_box_size.width / 2)},${main_nodes[4].y})`)
            .attr("width", standard_box_size.width)
            .attr("height", standard_box_size.height)
            .append("xhtml:div")
            .attr("class", standard_class)
            .style("font", standart_font)
            .html(`<b>accepted</b>`);

            svg.append("path")
              .attr("d", generateArrow(
              main_nodes[4].x,
              main_nodes[4].y,
              main_nodes[5].x,
              main_nodes[5].y,
              flangeSize,
              padding1,
              padding2)
              )
              .attr("fill", "none")
              .attr("stroke", "#164da2")
              .attr("stroke-opacity", 1.0)
              .attr("stroke-width", 2.5);


          svg.append("foreignObject")
            .attr("transform", d => `translate(${main_nodes[5].x - (standard_box_size.width / 2)},${main_nodes[5].y})`)
            .attr("width", standard_box_size.width)
            .attr("height", standard_box_size.height)
            .append("xhtml:div")
            .attr("class", standard_class)
            .style("font", standart_font)
            .html(`<b>in production</b>`);

            svg.append("path")
              .attr("d", generateArrow(
              main_nodes[2].x,
              main_nodes[2].y,
              main_nodes[3].x,
              main_nodes[3].y,
              flangeSize,
              padding1,
              padding2)
              )
              .attr("fill", "none")
              .attr("stroke", "#164da2")
              .attr("stroke-opacity", 1.0)
              .attr("stroke-width", 2.5);

            svg.append("foreignObject")
              .attr("transform", d => `translate(${main_nodes[6].x - (standard_box_size.width / 2)},${main_nodes[6].y})`)
              .attr("width", standard_box_size.width)
              .attr("height", standard_box_size.height)
              .append("xhtml:div")
              .attr("class", standard_class)
              .style("font", standart_font)
              .html(`<b>publication</b>`);

              svg.append("path")
                .attr("d", generateArrow(
                main_nodes[5].x,
                main_nodes[5].y,
                main_nodes[6].x,
                main_nodes[6].y,
                flangeSize,
                padding1,
                padding2)
                )
                .attr("fill", "none")
                .attr("stroke", "#164da2")
                .attr("stroke-opacity", 1.0)
                .attr("stroke-width", 2.5);


                svg.append("foreignObject")
                  //.attr("transform", d => `translate(${main_nodes[2].x - (standard_box_size.width / 2) + 125},${main_nodes[2].y + 25})`)
                  .attr("x", main_nodes[2].x + (standard_box_size.width / 1.6))
                  .attr("y", main_nodes[2].y)
                  .attr("width", standard_box_size.width)
                  .attr("height", standard_box_size.height)
                  .attr("id", "your_article_is_here_sign")
                  .append("xhtml:div")
                  //.attr("id", "your_article_is_here_sign")
                  .style("font", standart_font)
                  .html(`<i class="fas fa-arrow-left"></i> <b>your article is here</b>`);

                  swiggel();


      return svg.node();
  }

  function swiggel() {
    d3.select("#your_article_is_here_sign")
    .transition()
    .ease(d3.easeLinear)
    .duration(1000)
    //.attr("x", function (d) { return this.x + 100})
    .attr("transform", `translate(${5},${0})`)
    //.attr("transform", `translate(${this.x}, 0)`)
    .transition()
    .ease(d3.easeLinear)
    .duration(1000)
    .attr("transform", `translate(${-5},${0})`)

  //  .attr('x', 920)     // move the circle to 920 on the x axis
  //  .transition()        // apply a transition
  //  .duration(2000)      // apply it over 2000 milliseconds
  //  .attr('x', 40)      // return the circle to 40 on the x axis
    .on("end", swiggel);  // when the transition finishes start again
  };

  function generateArrow(x1, y1, x2, y2, flangeSize, padding1, padding2) {
    const dx = x2 - x1;
    const dy = y2 - y1;
    const length = Math.sqrt(dx * dx + dy * dy);
    //Hypotenuse

    let multiplier1 = padding1 / length;
    const dx1 = dx * multiplier1;
    const dy1 = dy * multiplier1;


    let multiplier2 = padding2 / length;
    const dx2 = dx * multiplier2;
    const dy2 = dy * multiplier2;

    var px = y1 - y2;
    var py = x2 - x1;
    let plength = Math.sqrt(px * px + py * py);
    let pmultiplier = flangeSize / plength;

    const px1 = px * pmultiplier;
    const py1 = py * pmultiplier;

    const sx = dx * pmultiplier;
    const sy = dy * pmultiplier;

    const a1 = x1 + dx1;
    const b1 = y1 + dy1;
    const a2 = x2 - dx2;
    const b2 = y2 - dy2;

    return `
      M${a1}, ${b1}
      L${a2}, ${b2}
      M${a2 + px1 - sx}, ${b2 + py1 - sy}
      L${a2}, ${b2}
      L${a2 - px1 - sx}, ${b2 - py1 -sy}
    `;
  }

  var arrowTo = function(d) {
    var y0 = d.source.y;
    var x0 = d.source.x;
    var x1 = d.target.x;
    var y1 = d.target.y;

    var arrow = generateArrow(x0, y0, x1, y1, 15, 25, 25);

    return arrow.toString();
    //return path.toString();
  }

</script>
